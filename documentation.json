{
    "pipes": [],
    "interfaces": [
        {
            "name": "User",
            "id": "interface-User-d4821beac0e4a852e513391b7470981c4353fdd95a18628bb68136c8695b489ee15b926e2e5031bc26cf30e1508e0a362c3ee13a06734702b4d15af140e485d5",
            "file": "src/stories/user.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface User {\n  name: string;\n}\n",
            "properties": [
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        }
    ],
    "injectables": [],
    "guards": [],
    "interceptors": [],
    "classes": [],
    "directives": [],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-6e393a5e6546bf1ce4d9918d57918ccb323784c90cb74faeeb50b579113872d2c73fd580a03de2587a76fef8cb0da6819dd19f4b3745da4c486c73921e49b02a",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "provideIcons({ lucideInfo, lucideAlertCircle })"
                }
            ],
            "selector": "app-root",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "title",
                    "defaultValue": "'test-cli'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "RouterOutlet"
                },
                {
                    "name": "HlmButtonDirective",
                    "type": "directive"
                },
                {
                    "name": "HlmAccordionImports"
                },
                {
                    "name": "HlmAlertImports"
                },
                {
                    "name": "HlmIconComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { RouterOutlet } from '@angular/router';\nimport { lucideAlertCircle, lucideInfo } from '@ng-icons/lucide';\nimport { HlmAlertImports, HlmButtonDirective, provideIcons } from 'unicon-ng';\nimport { HlmAccordionImports } from '@spartan-ng/ui-accordion-helm';\nimport { HlmIconComponent } from '@spartan-ng/ui-icon-helm';\n@Component({\n  selector: 'app-root',\n  standalone: true,\n  imports: [\n    RouterOutlet,\n    HlmButtonDirective,\n    HlmAccordionImports,\n    HlmAlertImports,\n    HlmIconComponent,\n  ],\n  templateUrl: './app.component.html',\n  styleUrl: './app.component.scss',\n  providers: [provideIcons({ lucideInfo, lucideAlertCircle })],\n})\nexport class AppComponent {\n  title = 'test-cli';\n}\n",
            "styleUrl": "./app.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<button hlmBtn>Button</button>\n\n<hlm-accordion>\n  <hlm-accordion-item>\n    <button hlmAccordionTrigger>\n      Is it accessible?\n      <hlm-icon hlmAccIcon />\n    </button>\n    <hlm-accordion-content>\n      Yes. It adheres to the WAI-ARIA design pattern.\n    </hlm-accordion-content>\n  </hlm-accordion-item>\n\n  <hlm-accordion-item>\n    <button hlmAccordionTrigger>\n      Is it styled?\n      <hlm-icon hlmAccIcon />\n    </button>\n    <hlm-accordion-content>\n      Yes. It comes with default styles that match the other components'\n      aesthetics.\n    </hlm-accordion-content>\n  </hlm-accordion-item>\n\n  <hlm-accordion-item>\n    <button hlmAccordionTrigger>\n      Is it animated?\n      <hlm-icon hlmAccIcon />\n    </button>\n    <hlm-accordion-content>\n      Yes. It's animated by default, but you can disable it if you prefer.\n    </hlm-accordion-content>\n  </hlm-accordion-item>\n</hlm-accordion>\n\n<div hlmAlert>\n  <hlm-icon name=\"lucideInfo\" hlmAlertIcon />\n  <h4 hlmAlertTitle>Introducing spartan/ui!</h4>\n  <p hlmAlertDesc>\n    spartan/ui is made up of unstyled UI providers, the spartan/ui/brain.<br />\n    On top we add spartan/ui/helm(et) with shadcn-like styles.\n  </p>\n</div>\n"
        }
    ],
    "modules": [],
    "miscellaneous": {
        "variables": [
            {
                "name": "appConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ApplicationConfig",
                "defaultValue": "{\n  providers: [provideRouter(routes)]\n}"
            }
        ],
        "functions": [],
        "typealiases": [],
        "enumerations": [],
        "groupedVariables": {
            "src/app/app.config.ts": [
                {
                    "name": "appConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ApplicationConfig",
                    "defaultValue": "{\n  providers: [provideRouter(routes)]\n}"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {}
    },
    "routes": [],
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/app.config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "appConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/user.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            }
        ]
    }
}